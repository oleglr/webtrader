{"version":3,"sources":["../../../../src/tradingtimes/tradingTimes.es6"],"names":["table","tradingWin","select","sub_select","processData","markets","market_names","submarket_names","forEach","market","push","display_name","submarkets","submarket","getRowsFor","marketname","submarket_name","filter","m","symbols","s","instruments","rows","map","sym","times","open","close","settlement","events","length","descrip","dates","join","init","$menuLink","require","click","windows","createBlankWindow","title","i18n","dialogClass","width","height","track","module_id","is_unique","data","dialog","initTradingWin","moveToTop","$html","subheader","appendTo","dataTable","className","paging","ordering","searching","processing","parent","addClass","api","columns","every","column","header","on","search","value","draw","changedFn","refreshTable","yyyy_mm_dd","updateTable","result","market_name","remove","add","refresh","menu","extractFilteredMarkets","active_symbols","markets_sorted_list","$","isEmptyObject","changed","val","new_active_symbols","cumulative_submarkets","Object","keys","update_list","makeSelectmenu","list","inx","off","getCachedData","trading_times_request","trading_times","$processing_msg","attr","show","Promise","all","liveapi","cached","send","then","results","response","catch","err","growl","error","message","hide","moment","utc","format","maxDate","toDate","addDateToHeader","date"],"mappings":"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","file":"tradingTimes.js","sourcesContent":["ï»¿import $ from 'jquery';\r\nimport windows from 'windows/windows';\r\nimport liveapi from 'websockets/binary_websockets';\r\nimport menu from 'navigation/menu';\r\nimport 'datatables';\r\nimport 'jquery-growl';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { getObjectMarketSubmarkets, getSortedMarkets, getSortedSubmarkets } from '../common/marketUtils';\r\nimport 'common/util'\r\n\r\nlet table = null;\r\nlet tradingWin = null;\r\nlet select = null;\r\nlet sub_select = null;\r\n\r\n/* data: result of trading_times api */\r\nconst processData = (markets) => {\r\n   markets = markets || [];\r\n   //    || [{\r\n   //    display_name: 'Forex',\r\n   //    submarkets: [{\r\n   //        display_name: 'Major Paris',\r\n   //        instruments: [{\r\n   //            delay_amount: 0,\r\n   //            events: [{dates:'Fridays',descrip:'Closes early at(21:00)'}],\r\n   //            display_name: 'AUD/JPY',\r\n   //            settlement: '23:59:59',\r\n   //            symbol: 'frxAUDJPY',\r\n   //            times: {\r\n   //                close: ['23:59:59'],\r\n   //                open: ['00:00:00']\r\n   //            }\r\n   //        }]\r\n   //    }]\r\n   //}];\r\n   /* extract market and submarket names */\r\n   const market_names = [];\r\n   const submarket_names = { };\r\n   markets\r\n    .forEach((market) => {\r\n      market_names.push(market.display_name);\r\n      submarket_names[market.display_name] = [];\r\n      market.submarkets.forEach(\r\n        (submarket) => {\r\n            submarket_names[market.display_name].push(submarket.display_name)\r\n         }\r\n     )\r\n   });\r\n\r\n  return {\r\n    market_names: market_names,\r\n    submarket_names: submarket_names,\r\n    /* get the rows for this particular marketname and sumbarket_name */\r\n    getRowsFor: function(marketname, submarket_name) {\r\n      // TODO: comeback and use lodash once 'trade module' changes got merged.\r\n      const market = markets.filter((m) => (m.display_name == marketname))[0];\r\n      const symbols = market && market.submarkets.filter((s) => (s.display_name == submarket_name))[0].instruments;\r\n\r\n      const rows = (symbols || []).map((sym) => {\r\n        return [\r\n          sym.display_name,\r\n          sym.times.open[0],\r\n          sym.times.close[0],\r\n          sym.times.settlement || sym.settlement || '-',\r\n          (sym.events && sym.events.length > 0) ?\r\n            sym.events\r\n              .map(({descrip, dates}) => `${descrip}: ${dates}`)\r\n              .join('<br>')\r\n            : '-',\r\n        ];\r\n      });\r\n      return rows;\r\n    }\r\n  };\r\n}\r\n\r\nexport const init = ($menuLink) => {\r\n   require([\"css!tradingtimes/tradingTimes.css\"]);\r\n   $menuLink.click(() => {\r\n      if (!tradingWin) {\r\n         tradingWin = windows.createBlankWindow($('<div/>'), {\r\n            title: 'Trading Times'.i18n(),\r\n            dialogClass: 'tradingTimes',\r\n            width: 800,\r\n            height: 400,\r\n         });\r\n         tradingWin.track({\r\n            module_id: 'tradingTimes',\r\n            is_unique: true,\r\n            data: null\r\n         });\r\n         tradingWin.dialog('open');\r\n         require(['text!tradingtimes/tradingTimes.html'], initTradingWin);\r\n      }\r\n      else\r\n         tradingWin.moveToTop();\r\n   });\r\n}\r\n\r\nconst initTradingWin = ($html) => {\r\n   $html = $($html).i18n();\r\n   const subheader = $html.filter('.trading-times-sub-header');\r\n   table = $html.filter('table');\r\n   $html.appendTo(tradingWin);\r\n\r\n   table = table.dataTable({\r\n      data: [],\r\n      \"columnDefs\": [\r\n         { className: \"dt-body-center dt-header-center\", \"targets\": [ 0,1,2,3,4 ] }\r\n      ],\r\n      paging: false,\r\n      ordering: false,\r\n      searching: true,\r\n      processing: true\r\n   });\r\n   table.parent().addClass('hide-search-input');\r\n\r\n   // Apply the a search on each column input change\r\n   table.api().columns().every(function () {\r\n      const column = this;\r\n      $('input', this.header()).on('keyup change', function () {\r\n         if (column.search() !== this.value)\r\n            column.search(this.value) .draw();\r\n      });\r\n   });\r\n\r\n   let market_names = null,\r\n      submarket_names = null,\r\n      changedFn = null;\r\n\r\n   const refreshTable = (yyyy_mm_dd) => {\r\n      /* update the table with the given marketname and submarketname */\r\n      const updateTable = (result, market_name,submarket_name) => {\r\n         const rows = result.getRowsFor(market_name, submarket_name);\r\n         table.api().rows().remove();\r\n         table.api().rows.add(rows);\r\n         table.api().draw();\r\n      }\r\n\r\n      /* refresh the table with result of {trading_times:yyyy_mm_dd} from WS */\r\n      const refresh = (data, symbols) => {\r\n         const result = processData(menu.extractFilteredMarkets(data[0]));\r\n         const active_symbols = symbols;\r\n         let header = getObjectMarketSubmarkets(active_symbols);\r\n         const markets_sorted_list = getSortedMarkets(active_symbols);\r\n         \r\n         if($.isEmptyObject(header)) return;\r\n   \r\n         function changed() {\r\n           const val = $(this).val();\r\n           const new_active_symbols = symbols;\r\n           header = getObjectMarketSubmarkets(new_active_symbols);\r\n   \r\n           if (header[val]) {\r\n              const cumulative_submarkets = Object.keys(header[val]);\r\n              submarket_names.update_list(getSortedSubmarkets(cumulative_submarkets));\r\n           };\r\n   \r\n           updateTable(result, market_names.val(), submarket_names.val());\r\n         };\r\n   \r\n           if (market_names == null) {\r\n               const select = $('<select />');\r\n               select.appendTo(subheader);\r\n               market_names = windows.makeSelectmenu(select, {\r\n                 list: markets_sorted_list,\r\n                 inx: 0,\r\n               });\r\n               market_names.off('selectmenuchange', changed);\r\n               market_names.on('selectmenuchange', changed);\r\n           } else {\r\n             market_names.update_list(markets_sorted_list);\r\n             market_names.off('selectmenuchange', changed);\r\n             market_names.on('selectmenuchange', changed);\r\n         }\r\n   \r\n           if (submarket_names == null) {\r\n               const sub_select = $('<select />');\r\n               sub_select.appendTo(subheader);\r\n               submarket_names = windows.makeSelectmenu(sub_select, {\r\n                 list: getSortedSubmarkets(Object.keys(header[market_names.val()])),\r\n                 inx: 0,\r\n                 changed: changedFn,\r\n               });\r\n               submarket_names.off('selectmenuchange', changed);\r\n               submarket_names.on('selectmenuchange', changed);\r\n             } else {\r\n             submarket_names.update_list(getSortedSubmarkets(Object.keys(header[market_names.val()])));\r\n             submarket_names.off('selectmenuchange', changed);\r\n             submarket_names.on('selectmenuchange', changed);\r\n         }\r\n       \r\n         updateTable(result, market_names.val(), submarket_names.val());\r\n      };\r\n\r\n      const getCachedData = () => {\r\n         const trading_times_request = { trading_times: yyyy_mm_dd };\r\n         const $processing_msg = $('#' + table.attr('id') + '_processing');\r\n\r\n         $processing_msg.show();\r\n         Promise.all(\r\n             [\r\n                 liveapi.cached.send(trading_times_request),\r\n             ])\r\n             .then((results) => {\r\n               liveapi\r\n               .send({ active_symbols: \"brief\" })\r\n               .then(function (response) {\r\n                  refresh(results, response.active_symbols);\r\n               })\r\n               .catch((err) => {\r\n                  $.growl.error({ message: err.message });\r\n               });\r\n               $processing_msg.hide();\r\n             })\r\n             .catch((error) => {\r\n                 $.growl.error({ message: error.message });\r\n                 $processing_msg.hide();\r\n             });\r\n       };\r\n\r\n      getCachedData();\r\n      require(['websockets/binary_websockets'], (liveapi) => {\r\n          liveapi.events.on('login', getCachedData);\r\n          liveapi.events.on('logout', getCachedData);\r\n       });\r\n   }\r\n\r\n   refreshTable(moment.utc().format('YYYY-MM-DD'));\r\n   const maxDate = moment.utc().add(1, 'years').toDate();\r\n   tradingWin.addDateToHeader({\r\n      title: 'Date: ',\r\n      date: moment.utc().toDate(),\r\n      changed: refreshTable,\r\n      maxDate,\r\n   });\r\n}\r\n\r\nexport default {\r\n   init\r\n}\r\n"]}